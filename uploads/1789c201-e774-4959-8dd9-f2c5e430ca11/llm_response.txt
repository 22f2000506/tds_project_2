{
    "code": "import pandas as pd\nimport os\nimport io\n\n# Define paths\noutput_dir = \"uploads/1789c201-e774-4959-8dd9-f2c5e430ca11\"\nquestion_file_path = os.path.join(output_dir, \"question.txt\")\ndata_csv_path = os.path.join(output_dir, \"data.csv\")\nmetadata_txt_path = os.path.join(output_dir, \"metadata.txt\")\n\n# Ensure output directory exists\nos.makedirs(output_dir, exist_ok=True)\n\n# --- 1. Read the content of question.txt ---\nraw_lines = []\nextracted_questions = []\ntry:\n    with open(question_file_path, 'r', encoding='utf-8') as f:\n        for line in f:\n            stripped_line = line.strip()\n            if stripped_line: # Only process non-empty lines\n                raw_lines.append(stripped_line)\n                extracted_questions.append(stripped_line) # Treat all non-empty lines as questions\nexcept FileNotFoundError:\n    # This should not happen if the file is correctly uploaded, but for robustness:\n    print(f\"Warning: {question_file_path} not found. Creating empty DataFrame.\")\n    pass\n\n# --- 2. Create DataFrame and save to data.csv ---\nif raw_lines:\n    df = pd.DataFrame(raw_lines, columns=['content'])\nelse:\n    # If question.txt was empty or not found, create an empty DataFrame to still satisfy the save requirement\n    df = pd.DataFrame(columns=['content'])\n\ndf.to_csv(data_csv_path, index=False, encoding='utf-8')\n\n# --- 3. Generate metadata.txt ---\nmetadata_content = []\n\n# Output of df.info()\nbuffer = io.StringIO()\ndf.info(buf=buffer)\nmetadata_content.append(\"Output of df.info():\")\nmetadata_content.append(buffer.getvalue())\n\n# Column names\nmetadata_content.append(\"\\nColumn names:\")\nmetadata_content.append(\", \".join(df.columns.tolist()))\n\n# First few rows (df.head())\nmetadata_content.append(\"\\nFirst few rows (df.head()):\")\nmetadata_content.append(df.head().to_string())\n\n# ANSWER_FORMAT block\nmetadata_content.append(\"\\nANSWER_FORMAT: JSON\") # No explicit format provided, so default to JSON\n\n# Save metadata to file\nwith open(metadata_txt_path, 'w', encoding='utf-8') as f:\n    f.write(\"\\n\".join(metadata_content))\n",
    "libraries": [
        "pandas"
    ],
    "questions": [],
    "comment": "Step-3: Getting scrap code and metadata from llm. Tries count = %d 0"
}